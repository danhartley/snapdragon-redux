/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/utils/utils.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/utils/utils.js":
/*!****************************!*\
  !*** ./src/utils/utils.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nArray.prototype.concatAll = function () {\n  var results = [];\n\n  this.forEach(function (subArray) {\n    subArray.forEach(function (element) {\n      results.push(element);\n    });\n  });\n\n  return results;\n};\n\nvar log = function log(msg) {\n  return function (array) {\n    return array;\n  };\n};\n\nvar encodeQuery = function encodeQuery(q) {\n  if (q === undefined) return q;\n  if (Number.isInteger(q)) return q;\n  return encodeURIComponent(q.trim());\n};\n\nvar timer = function timer(sink, delay) {\n  var id = null;\n  Bacon.fromBinder(function () {\n    id = setInterval(function () {\n      sink();\n    }, delay);\n  }).onValue(function (element) {\n    console.log(element);\n  });\n  return id;\n};\n\nfunction intervalTimer(sink, delay) {\n  var timerId;\n\n  this.pause = function () {\n    window.clearInterval(timerId);\n  };\n\n  this.resume = function () {\n    window.clearInterval(timerId);\n    timerId = timer(sink, delay);\n  };\n\n  this.getId = function () {\n    return timerId;\n  };\n\n  this.resume();\n\n  return this;\n};\n\nvar shuffleArray = function shuffleArray(array) {\n\n  if (!array || array.length === 0) return;\n\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return [].concat(_toConsumableArray(array));\n\n  // return (arr\n  //   .map(a => [Math.random(), a])\n  //   .sort((a, b) => a[0] - b[0])\n  //   .map(a => a[1]))\n};\n\nvar randomiseSelection = function randomiseSelection(source, required) {\n  var zeroBased = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var r = function r(selection) {\n    var arr = shuffleArray(source);\n    selection = selection.concat(arr.map(function (item, index) {\n      if (index + selection.length < required) {\n        return zeroBased ? --item : item;\n      }\n    })).filter(function (item) {\n      return item !== undefined;\n    });\n    return selection.length < required ? r(selection) : selection;\n  };\n  return r([]);\n};\n\nvar nextItem = function nextItem(array, index) {\n  var item = array[index % array.length];\n  item.index = index % array.length;\n  return item;\n};\n\nvar insertObjectBetweenItems = function insertObjectBetweenItems(array, insert) {\n  var insertedIntoArray = array.reduce(function (acc, curr, currIndex) {\n    return acc.concat([insert, curr]);\n  }, []);\n  return insertedIntoArray;\n};\n\nvar doubledItemsInArray = function doubledItemsInArray(array) {\n  var doubledArray = array.reduce(function (acc, curr, currIndex) {\n    return acc.concat([curr, curr]);\n  }, []);\n  return doubledArray;\n};\n\nvar onlyUnique = function onlyUnique(value, index, self) {\n  return self.indexOf(value) === index;\n};\n\nvar sortBy = function sortBy(arr, prop) {\n  var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'asc';\n\n  return dir === 'asc' ? arr.sort(function (a, b) {\n    return parseFloat(a[prop]) - parseFloat(b[prop]);\n  }) : arr.sort(function (a, b) {\n    return parseFloat(b[prop]) - parseFloat(a[prop]);\n  });\n};\n\nvar sortAlphabeticallyBy = function sortAlphabeticallyBy(arr, prop) {\n  arr.sort(function (a, b) {\n    if (a[prop] < b[prop]) return -1;\n    if (a[prop] > b[prop]) return 1;\n    return 0;\n  });\n  return arr;\n};\n\nvar calcItemIndex = function calcItemIndex(offSet, moduleSize, index) {\n  var itemIndex = (offSet + index) % moduleSize === 0 ? offSet : offSet + (offSet + index) % moduleSize;\n  return itemIndex;\n};\n\nvar isIterable = function isIterable(array) {\n  return Array.isArray(array) && array.length !== 0;\n};\n\nvar capitaliseFirst = function capitaliseFirst(str) {\n  var text = str.substr(0, 1).toUpperCase() + str.substr(1).toLowerCase();\n  return text;\n};\n\nvar capitaliseAll = function capitaliseAll(str) {\n  var text = str.toLowerCase().split(' ').map(function (s) {\n    return s.charAt(0).toUpperCase() + s.substring(1);\n  }).join(' ');\n  return text;\n};\n\nvar getCellValue = function getCellValue(tr, idx, headerSortIndex, wide) {\n  var children = tr.children;\n  if (!wide) {\n    children = [].concat(_toConsumableArray(tr.children)).filter(function (child) {\n      return [].concat(_toConsumableArray(child.classList)).join('').indexOf('wide-screen') === -1;\n    });\n  }\n  var valueToSortOn = children[idx].dataset.snapIndex || children[idx].children[headerSortIndex].innerText || children[idx].innerText || children[idx].classList[0] || children[idx].textContent;\n  return valueToSortOn;\n};\n\nvar comparer = function comparer(idx, asc, headerSortIndex, wide) {\n  return function (a, b) {\n    return function (v1, v2) {\n      return v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2);\n    }(getCellValue(asc ? a : b, idx, headerSortIndex, wide), getCellValue(asc ? b : a, idx, headerSortIndex, wide));\n  };\n};\n\nvar makeSortable = function makeSortable(document, callback, wide) {\n\n  Array.from(document.querySelectorAll('th > span')).forEach(function (sp) {\n    sp.addEventListener('click', function () {\n\n      var headerSortIndex = this.innerText.toUpperCase() === 'ORDER' ? 1 : 0;\n\n      var names = [];\n      var th = this.parentElement;\n      if (th.classList[0] === 'not-sortable') return;\n      var table = th.closest('table');\n      var body = table.querySelector('tbody');\n      var footer = table.querySelector('tfoot');\n\n      Array.from(table.querySelectorAll('tr:nth-child(n+2)')).sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc, headerSortIndex, wide)).forEach(function (tr) {\n        if (tr !== footer) {\n          body.appendChild(tr);\n          names.push(tr.cells[0].id);\n        }\n      });\n\n      callback(names);\n    });\n  });\n};\n\nvar itemCountReducer = function itemCountReducer(acc, curr) {\n  acc[curr.toString()] = acc[curr.toString()] || 0;\n  acc[curr.toString()]++;\n  return acc;\n};\n\nvar flatten = function flatten(array) {\n  var flattenedArray = array.reduce(function (accumulator, currentValue) {\n    return accumulator.concat(currentValue);\n  }, []);\n  return flattenedArray;\n};\n\nvar getObservableMonths = function getObservableMonths(date) {\n  var span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n\n  var daysAway = function daysAway(when, days) {\n    var dateFromDays = date;\n    var direction = when === 'future' ? 1 : -1;\n    dateFromDays.setDate(dateFromDays.getDate() + direction * days);\n    return dateFromDays;\n  };\n\n  var startMonth = daysAway('past', 30).getMonth();\n  var thisMonth = date.getMonth() + 1;\n  var endMonth = daysAway('future', 30).getMonth() + 1;\n\n  var getMonthName = function getMonthName(month) {\n    var exampleDate = new Date(2000, month, 1);\n    var name = exampleDate.toLocaleString('en-uk', { month: 'long' });\n    return name;\n  };\n\n  var months = [{ index: startMonth, name: getMonthName(startMonth) }, { index: thisMonth, name: getMonthName(thisMonth) }, { index: endMonth, name: getMonthName(endMonth) }];\n\n  return months;\n};\n\nvar getRandomInt = function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nvar getSetOfAnswers = function getSetOfAnswers(variables, pool, trait) {\n\n  var answers = void 0;\n\n  if (variables === 1) {\n    answers = pool;\n  } else {\n    answers = [];\n    var sets = [];\n    var combinations = pool.length / variables;\n    while (pool.length) {\n      var set = pool.splice(0, combinations);\n      sets.push(set);\n    }\n    while (sets[0].length) {\n      var answer = sets.map(function (item) {\n        var lastItem = item.pop();\n        return lastItem;\n      }).join(', ');\n      if (answer !== trait.value) {\n        answers.push(answer);\n      }\n    }\n    answers.push(trait.value);\n  }\n\n  answers = utils.shuffleArray(answers);\n\n  return answers;\n};\n\nvar utils = exports.utils = {\n  log: log,\n  encodeQuery: encodeQuery,\n  timer: timer,\n  intervalTimer: intervalTimer,\n  shuffleArray: shuffleArray,\n  nextItem: nextItem,\n  randomiseSelection: randomiseSelection,\n  insertObjectBetweenItems: insertObjectBetweenItems,\n  doubledItemsInArray: doubledItemsInArray,\n  onlyUnique: onlyUnique,\n  sortBy: sortBy,\n  sortAlphabeticallyBy: sortAlphabeticallyBy,\n  calcItemIndex: calcItemIndex,\n  isIterable: isIterable,\n  capitaliseFirst: capitaliseFirst,\n  capitaliseAll: capitaliseAll,\n  makeSortable: makeSortable,\n  itemCountReducer: itemCountReducer,\n  flatten: flatten,\n  getObservableMonths: getObservableMonths,\n  getRandomInt: getRandomInt,\n  getSetOfAnswers: getSetOfAnswers\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n//# sourceURL=webpack:///./src/utils/utils.js?");

/***/ })

/******/ });