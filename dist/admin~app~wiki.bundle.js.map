{"version":3,"sources":["webpack:///./src/wikipedia/wiki.js"],"names":["root","formatUrl","name","encode","binomial","indexOf","ranks","split","fetchWiki","missingMessage","undefined","url","utils","encodeQuery","config","method","fetch","response","json","data","R","errorPromise","Promise","resolve","reject","cleanEntry","str","cleaned","replace","wikiLink","entry","src","formatWiki","html","length","renderWiki","wikiNode","item","language","wikiSearchTerm","names","filter","find","searchTerm","vernacularName","searchTerms","term","exceptions","innerHTML","slice","genus","genusEntry"],"mappings":";g6LAGA,IAAIA,EAAO,GAELC,EAAY,SAAZA,UAAaC,EAAMF,EAAMG,GAC3B,IAAIC,EAAWF,EACf,GAAGA,EAAKG,QAAQ,KAAO,EAAG,CACtB,IAAIC,EAAQJ,EAAKK,MAAM,MACvBH,EAAWE,EAAM,GAAK,IAAMA,EAAM,IACtBD,QAAQ,kBAAoB,IACpCD,GAAY,IAAME,EAAM,IAGhC,OAAON,EAAOG,EAAOC,I,SAGVI,U,gIAAf,iBAAyBN,EAAMO,GAA/B,+GAEgBC,IAATR,EAFP,yCAGeO,GAHf,cAMUE,EAAMV,EAAUC,EAAMF,EAAMY,QAAMC,aAClCC,EAAS,CACXC,OAAQ,OARhB,kBAY+BC,MAAML,EAAKG,GAZ1C,cAYcG,EAZd,iBAa2BA,EAASC,OAbpC,eAacC,EAbd,yBAceC,UAAUD,IAdzB,yCAgBcE,EAAe,IAAIC,SAAQ,SAACC,EAASC,GACvCD,EAAQd,MAjBpB,kBAmBeY,GAnBf,iE,sBAuBA,IAAMI,EAAa,SAAbA,WAAaC,GACf,IAAIC,EAAUD,EAMd,OADAC,GADAA,GADAA,GADAA,GADAA,EAAUA,EAAQC,QAAQ,mBAAoB,KAC5BA,QAAQ,KAAM,MACdA,QAAQ,KAAM,KACdA,QAAQ,KAAM,MACdA,QAAQ,KAAM,MAI9BC,EAAW,SAAXA,SAAWC,GACb,IAAMC,EAAMN,EAAWK,GAAOF,QAAQ,aAAc,gBACpD,6EAAuEG,EAAvE,+CAGEC,EAAa,SAAbA,WAAcF,GAIhB,GAAGV,WAAWU,EAAM,GAFD,CAAC,WAAY,UAG5B,sDAA+CL,EAAWK,EAAM,IAAhE,UAGJ,IAAIA,EAAO,MAAO,GAClB,IAAIG,EAAO,GAYX,OAXoB,IAAjBH,EAAMI,SACLD,GAAQJ,EAASC,EAAM,KAExBA,EAAM,KAAIG,GAAQ,yCAAJ,OAA4CR,EAAWK,EAAM,IAA7D,WACdA,EAAM,MAC4B,IAA9BA,EAAM,GAAGzB,QAAQ,SAAgB4B,GAAQJ,EAASC,EAAM,IACtDG,GAAQ,yCAAJ,OAA4CR,EAAWK,EAAM,IAA7D,WACVA,EAAM,MAC4B,IAA9BA,EAAM,GAAGzB,QAAQ,SACpB4B,GAAQJ,EAASC,EAAM,IAClBG,GAAQ,yCAAJ,OAA4CR,EAAWK,EAAM,IAA7D,WACNG,G,SAGIE,W,qIAAf,kBAA0BC,EAAUC,EAAMC,GAA1C,mHACUlC,EAAWiC,EAAKnC,KAChBqC,EAAiBF,EAAKG,MAAQH,EAAKG,MAAMC,QAAO,SAAAvC,GAAI,OAAIA,EAAKoC,WAAaA,KAAUI,MAAK,SAAAxC,GAAI,OAAIA,EAAKqC,kBAAkB,KACxHI,EAAaJ,EAAiBA,EAAeK,eAAkBP,EAAKQ,YAChDR,EAAKQ,YAAYJ,QAAO,SAAAK,GAAI,OAAIA,EAAKR,WAAaA,KAAU,GAAGK,WAC/DvC,EAC1BJ,EAAO,WAAH,OAAcsC,EAAd,qFACES,EAAa,CAAE,wBAAyB,kBAAmB,uBAC9D3B,WAAWiB,EAAKnC,KAAM6C,KACrB/C,EAAO,WAAH,OAAcsC,EAAd,wGAERF,EAASY,UAAY,GAXzB,SAawBxC,UAAUmC,GAblC,YAaUb,EAbV,UAegBA,EAAM,GAftB,iBAgBQM,EAASY,UAAYhB,EAAWF,EAAMmB,MAAM,IAhBpD,2BAkBY7C,EAlBZ,0CAkB6B,IAlB7B,eAmBc8C,EAAQ9C,EAASG,MAAM,KAAK,GAnB1C,UAoBiCC,UAAU0C,GApB3C,QAqB6B,MADfC,EApBd,QAqBsB,GACVf,EAASY,UAAYhB,EAAWmB,EAAWF,MAAM,IAC/B,OAAbX,GACLH,WAAWC,EAAUhC,EAAU,MAxB3C,yD","file":"admin~app~wiki.bundle.js","sourcesContent":["import * as R from 'ramda';\nimport { utils } from 'utils/utils';\n\nlet root = '';\n\nconst formatUrl = (name, root, encode) => {\n    let binomial = name;\n    if(name.indexOf(' ') > 0) {\n        let ranks = name.split(' ');\n        binomial = ranks[0] + ' ' + ranks[1];\n        if(binomial.indexOf('Speckled wood') > -1) {\n            binomial += ' ' + ranks[2];\n        }\n    }    \n    return root + encode(binomial);\n};\n\nasync function fetchWiki(name, missingMessage) {\n    \n    if(name === undefined) {\n        return missingMessage;  \n    }\n\n    const url = formatUrl(name, root, utils.encodeQuery);\n    const config = { \n        method: 'GET'\n    };\n    \n    try { \n        const response = await fetch(url, config);\n        const data = await response.json();        \n        return R.flatten(data);        \n    } catch (e) {\n        const errorPromise = new Promise((resolve, reject) => {\n            resolve(missingMessage)\n        });\n        return errorPromise;\n    }    \n};\n\nconst cleanEntry = str => {\n    let cleaned = str;\n    cleaned = cleaned.replace('( or UK: , US: )', '');\n    cleaned = cleaned.replace('(;', '(');\n    cleaned = cleaned.replace('()', '');\n    cleaned = cleaned.replace('( ', '(');\n    cleaned = cleaned.replace('  ', ' ');\n    return cleaned;\n};\n\nconst wikiLink = entry => {\n    const src = cleanEntry(entry).replace('.wikipedia', '.m.wikipedia');\n    return `<span data-toggle=\"modal\" data-target=\"#wikiModal\" data-src=\"${src}\" class=\"underline-link\">Wiki modal</span>`;    \n};\n\nconst formatWiki = (entry) => {\n\n    const exceptions = ['Tarragon', 'Apple'];\n\n    if(R.contains(entry[0], exceptions)) {\n        return `<li class=\"species-card-wiki-entry\">'${cleanEntry(entry[2])}'</li>`;\n    }\n\n    if(!entry) return '';\n    let html = '';\n    if(entry.length === 1) {\n        html += wikiLink(entry[0]);\n    }\n    if(entry[1]) html += `<li class=\"species-card-wiki-entry\">'${cleanEntry(entry[1])}'</li>`;\n    if(entry[2])\n        if(entry[2].indexOf('https')!== -1) html += wikiLink(entry[2]);\n        else html += `<li class=\"species-card-wiki-entry\">'${cleanEntry(entry[2])}'</li>`;\n    if(entry[3]) \n        if(entry[3].indexOf('https')!== -1)\n        html += wikiLink(entry[3]);\n        else html += `<li class=\"species-card-wiki-entry\">'${cleanEntry(entry[3])}'</li>`;\n    return html;\n};\n\nasync function renderWiki(wikiNode, item, language) {\n    const binomial = item.name;\n    const wikiSearchTerm = item.names ? item.names.filter(name => name.language === language).find(name => name.wikiSearchTerm) : null;\n    const searchTerm = wikiSearchTerm ? wikiSearchTerm.vernacularName : (item.searchTerms \n                            ? item.searchTerms.filter(term => term.language === language)[0].searchTerm \n                            : binomial);\n    root = `https://${language}.m.wikipedia.org/w/api.php?action=opensearch&format=json&origin=*&limit=1&search=`;\n    const exceptions = [ 'Artemisia dracunculus', 'Malus domestica', 'Zingiber officinale'];\n    if(R.contains(item.name, exceptions)) {\n        root = `https://${language}.m.wikipedia.org/w/api.php?action=opensearch&format=json&origin=*&limit=2&redirects=resolve&search=`;\n    }    \n    wikiNode.innerHTML = \"\";\n\n    const entry = await fetchWiki(searchTerm);\n\n    if(entry && entry[2]) {\n        wikiNode.innerHTML = formatWiki(entry.slice(1));\n    } else {\n        if(!binomial) return '';\n        const genus = binomial.split(' ')[0];\n        const genusEntry = await fetchWiki(genus);\n        if(genusEntry[2] !== '')\n            wikiNode.innerHTML = formatWiki(genusEntry.slice(1));\n        else if (language !== 'en') {\n            renderWiki(wikiNode, binomial, 'en');\n        }\n    }\n}\n\nexport {\n    formatUrl, \n    formatWiki,\n    renderWiki\n};"],"sourceRoot":""}