{"version":3,"sources":["webpack://learn-the-planet/./src/quiz/quiz-api-decks.js","webpack://learn-the-planet/./src/quiz/quiz-api.js","webpack://learn-the-planet/./src/quiz/quiz-config.js","webpack://learn-the-planet/./src/quiz/quiz-deck.js","webpack://learn-the-planet/./src/quiz/quiz-decks.js","webpack://learn-the-planet/./src/quiz/quiz-logic-handler.js","webpack://learn-the-planet/./src/quiz/quiz-logic.js","webpack://learn-the-planet/./src/quiz/quiz-modal.js","webpack://learn-the-planet/./src/quiz/quiz-settings.js","webpack://learn-the-planet/./src/quiz/quiz-state.js","webpack://learn-the-planet/./src/quiz/quiz-summary.js","webpack://learn-the-planet/./src/quiz/templating.js","webpack://learn-the-planet/./src/quiz/quiz-deck-answers-template.html","webpack://learn-the-planet/./src/quiz/quiz-deck-image-template.html","webpack://learn-the-planet/./src/quiz/quiz-decks-template.html","webpack://learn-the-planet/./src/quiz/quiz-settings-template.html","webpack://learn-the-planet/./src/quiz/quiz-state-begin.html","webpack://learn-the-planet/./src/quiz/quiz-state-score.html","webpack://learn-the-planet/./src/quiz/quiz-summary-template.html"],"names":["decks","name","species","getDeckSummaries","resolve","deck","count","length","getSpeciesDetailsInParallel","firestore","getDecks","s","items","sp","vernacularName","names","srcs","scaleImage","api","quizConfig","TIME_PER_QUESTION","QUESTIONS_PER_SPECIES","quizDeck","document","store","deckSettings","template","parent","card","answer","renderTemplate","handleAnswer","deckScore","question","e","cardIndex","c","score","logic","strip","options","option","quizDecks","handleDeckSelector","actions","enums","once","getDeck","_numberOfCardsPerSpecies","numberOfCardsPerSpecies","_index","_deck","_getDeck","contains","answers","take","src","getScore","response","success","isLastCard","total","correct","incorrect","quizLogicHandler","getQuizDeck","language","config","NUMBER_OF_ALTERNATIVE_ANSWERS","isCurrent","subscription","getNextDeck","getTimeRemaining","Date","seconds","Math","minutes","hours","days","resetClock","clearInterval","disableAnswers","initialiseClock","timeinterval","setInterval","t","clock","convertSecondsToClockTime","currentClockTime","scoreResponseAndSetNextCard","cardCount","index","isSecondLastCard","setTimeout","pad","size","time","parseFloat","milliseconds","openQuiz","init","quizSettings","r","id","quizState","remaining","deckState","endTime","quizScore","quizSummary","deckScoreHistory","Stamp","ns","re","mystate","i","len","address","a","JSON","str","match","matches","m","filterState","ssplice","clones","nodes","ele","appendChildren","expandString","Array","j","processChildren","attr","parts","iterName","tpl","addressOf","childState","instanceState","state","Object","k","cl","cloneAllNodes","expand","keys","key","childEle","nextSibling","replacement","replaceChildren","contentClone","clone","ctx","expanded"],"mappings":"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","file":"src_quiz_quiz-modal_js.bundle.js","sourcesContent":["export const decks = [\n  {\n    name: 'Wild Portugal',\n    species: [\n      \"Phagnalon saxatile\",\n      \"Lysimachia arvensis\",\n      \"Campanula erinus\",\n      \"Silene gallica\",\n      \"Lagurus ovatus\",\n      \"Acanthus mollis\",\n      \"Glebionis coronaria\",\n      \"Galactites tomentosa\",\n      \"Geranium purpureum\",\n      \"Taraxacum officinale\"\n    ]\n  },\n  {\n    name: 'Wild England I',\n    species: [\n      \"Lysimachia arvensis\",\n      \"Cymbalaria muralis\",\n      \"Daucus carota\",\n      \"Parietaria judaica\",\n      \"Foeniculum vulgare\",\n      \"Convolvulus arvensis\",    \n      \"Capsella bursa-pastoris\",\n      \"Bellis perennis\",\n      \"Geranium molle\",\n      \"Glebionis coronaria\",\n    ]\n  },\n  {\n    name: 'Wild England II',\n    species: [\n      \"Acanthus mollis\",\n      \"Cistus salviifolius\",\n      \"Borago officinalis\",\n      \"Oxalis pes-caprae\",\n      \"Lantana camara\",\n      \"Trifolium repens\",\n      \"Urtica dioica\",\n      \"Lythrum salicaria\",\n      \"Echium vulgare\",\n      \"Dactylis glomerata\"\n    ]\n  },\n  {\n    name: 'Wild England III',\n    species: [\n      'Epilobium angustifolium',\n      'Cardamine hirsuta',\n      'Conium maculatum',\n      'Borago officinalis',\n      'Briza maxima',\n      'Brassica nigra',\n      'Malva multiflora',\n      'Achillea millefolium',\n      'Pulicaria dysenterica',\n      'Succisa pratensis'\n    ]\n  },\n  {\n    name: 'Mushrooms',\n    species: [      \n      \"Cantharellus lateritius\",\n      \"Hericium erinaceus\",\n      \"Pleurotus ostreatus\",\n      \"Craterellus fallax\",\n      \"Laetiporus sulphureus\",      \n      \"Calvatia gigantea\",\n      \"Amanita bisporigera\",\n      \"Galerina marginata\",\n      \"Chlorophyllum molybdites\",      \n      \"Grifola frondosa\",      \n    ]\n  }\n];","import { firestore } from 'api/firebase/firestore';\nimport { decks } from 'quiz/quiz-api-decks';\nimport { scaleImage } from 'ui/helpers/image-handler';\n\nconst getDeckSummaries = () => {\n  return new Promise(resolve => resolve(decks.map(deck => { return { name: deck.name, count: deck.species.length } })));\n};\n\nconst getSpeciesDetailsInParallel = async species => {\n  return await firestore.getSpeciesInParallel(species);\n};\n\nconst getDecks = async name => {\n  \n  const species = decks.find(deck => deck.name === name).species;\n    const items = await getSpeciesDetailsInParallel(species.map(s => { return { name: s } } ));\n    const deck = {\n      name,\n      species: items\n    };\n    \n    return [{\n      name: deck.name,\n      species: deck.species.map(sp => {\n        return {\n          name: sp.name,\n          vernacularName: '',\n          names: sp.names,\n          srcs: sp.images.map(i => scaleImage(i).medium)\n        }\n      })\n    }];\n};\n\nexport const api = {\n  getDeckSummaries,\n  getDecks\n};","export const quizConfig = {\n  TIME_PER_QUESTION: 5,\n  QUESTIONS_PER_SPECIES: 2\n};","import { renderTemplate } from 'quiz/templating';\nimport { store } from 'redux/store';\nimport { logic } from 'quiz/quiz-logic';\n\nimport quizDeckTemplate from 'quiz/quiz-deck-image-template.html';\nimport quizDeckAnswersTemplate from 'quiz/quiz-deck-answers-template.html';\n\nexport const quizDeck = async deck => {\n\n  document.querySelector('.quiz .js-quiz-header').innerText = deck.name;\n\n  const { deckSettings } = store.getState();\n\n  const template = document.createElement('template');\n        template.innerHTML = quizDeckTemplate;\n\n  let parent = document.querySelector('.js-quiz-top');\n      parent.innerHTML = '';\n\n  const card = deck.cards.find(card => card.isCurrent) || deck.cards[0];\n\n  card.answers.forEach(answer => {\n    answer.name1 = deckSettings.name === 'vernacular' ? answer.vernacularName : answer.name;\n    answer.name2 = deckSettings.name === 'latin' ? answer.vernacularName : answer.name;\n  });\n\n  renderTemplate({ card }, template.content, parent);\n\n  template.innerHTML = quizDeckAnswersTemplate;\n\n  parent = document.querySelector('.js-quiz-middle');\n  parent.innerHTML = '';\n\n  renderTemplate({ card }, template.content, parent);\n\n  const handleAnswer = e => {\n\n    const { deckScore } = store.getState();\n    \n    const answer = {\n      question: {\n       name: card.answer.name,\n       vernacularName: card.answer.vernacularName \n      },\n      answer: {\n        name: e.target.dataset.name,\n        vernacularName: e.target.dataset.vernacularName\n      }\n    };\n\n    const cardIndex = deck.cards.findIndex(c => c.isCurrent);\n    const score = logic.scoreResponseAndSetNextCard(answer, cardIndex === -1 ? 0 : cardIndex, deck.cards.length, deckScore);\n\n    score.success ? e.target.classList.add('snap-success') : e.target.classList.add('snap-alert');\n\n    if(!score.success) {\n      document.querySelectorAll('.js-strip').forEach(strip => {\n        if(strip.dataset.name === score.question.name) {\n          strip.classList.add('snap-success');\n        }\n      });\n    }\n  };\n\n  const options = document.querySelectorAll('.js-strip');\n        options.forEach(option => option.addEventListener('click', handleAnswer));\n};","import { renderTemplate } from 'quiz/templating';\nimport { store } from 'redux/store';\nimport { enums } from 'ui/helpers/enum-helper';\nimport { actions } from 'redux/actions/action-creators';\nimport { logic } from 'quiz/quiz-logic';\nimport { quizConfig } from 'quiz/quiz-config';\n\nimport quizDecksTemplate from 'quiz/quiz-decks-template.html';\n\nexport const quizDecks = decks => {\n\n  document.querySelector('.quiz .js-quiz-header').innerText = 'Species recognition';\n\n  let template = document.createElement('template');\n      template.innerHTML = quizDecksTemplate;\n\n  let parent = document.querySelector('.js-quiz-top');\n      parent.innerHTML = '';\n  \n  renderTemplate({ decks: decks.filter(deck => deck.count > 0) }, template.content, parent);\n\n  const handleDeckSelector = async e => {\n\n    const { deckSettings } = store.getState();\n\n    actions.boundUpdateDeck(await logic.getQuizDeck(e.target.dataset.name, quizConfig.QUESTIONS_PER_SPECIES, deckSettings.language));\n    actions.boundUpdateDeckState(enums.deckState.BEGIN);\n  };\n\n  document.querySelectorAll('.js-decks').forEach(deck => {\n    deck.addEventListener('click', handleDeckSelector, { once: true });\n  });\n};","import { take, contains } from 'ramda';\n\nimport { utils } from 'utils/utils';\n\nconst getDeck = (deck, numberOfAlternativeAnswers, numberOfCardsPerSpecies) => {\n\n  let _numberOfCardsPerSpecies = numberOfCardsPerSpecies > deck.species[0].srcs.length ? deck.species[0].srcs.length : numberOfCardsPerSpecies;\n  let _index = 0;\n  let _deck = _getDeck(deck, numberOfAlternativeAnswers, _index);\n\n  ++_index;\n\n  while(_index < _numberOfCardsPerSpecies) {    \n    _deck.cards = [ ..._deck.cards, ..._getDeck(deck, numberOfAlternativeAnswers, _index).cards ];\n    ++_index;\n  }\n\n  return _deck;    \n}\n\nconst _getDeck = (deck, numberOfAlternativeAnswers, index) => {\n\n  deck.cards = [];\n  deck.exclude = [];\n\n  deck.species.forEach(sp => {\n    let answer = utils.shuffleArray(deck.species.filter(sp => !contains(sp.name, deck.exclude)));\n    if(!answer) return;\n        answer = answer[0];\n    const answers = utils.shuffleArray([ ...take(numberOfAlternativeAnswers, deck.species.filter(sp => sp.name !== answer.name)), answer ]);\n    const card = {\n      answers: answers.map(answer => { return { ...answer, src: answer.srcs[index] } }),\n      answer: { ...answer, src: answer.srcs[index] }\n    };\n    deck.exclude.push(answer.name);\n    deck.cards.push(card);\n  });\n\n  return deck;\n};\n\nconst getScore = (response, isLastCard, deckScore) => {\n\n  const score = {\n    question: response.question,\n    answer: response.answer,    \n    success: response.question.name === response.answer.name || response.question.vernacularName === response.answer.vernacularName,\n    isLastCard\n  };\n\n  let total = ++deckScore.total;\n  let correct = deckScore.correct;\n  let incorrect = deckScore.incorrect;\n  return { \n    ...score\n    , total\n    , correct: score.success ? ++correct : correct\n    , incorrect: !score.success ? ++incorrect : incorrect\n  };\n};\n\nexport const quizLogicHandler = {\n  getDeck,\n  getScore\n};","import \"babel-polyfill\";\n\nimport { store } from 'redux/store';\nimport { subscription } from 'redux/subscriptions';\nimport { api } from 'quiz/quiz-api';\nimport { actions } from 'redux/actions/action-creators';\n\nimport { quizLogicHandler } from 'quiz/quiz-logic-handler';\nimport { quizDeck } from 'quiz/quiz-deck';\nimport { quizState, quizScore } from 'quiz/quiz-state';\n\nconst getDecks = async () => {\n  return await api.getDecks();\n};\n\nconst getQuizDeck = async (name, numberOfCardsPerSpecies = 1, language = 'en') => {\n\n  const { config } = store.getState();\n  const NUMBER_OF_ALTERNATIVE_ANSWERS = config.isLandscapeMode ? 5 : 3;\n\n  const decks = await api.getDecks(name);\n  const deck = decks[0];\n        deck.species.forEach(s => {\n          const names = s.names.filter(name => name.language === language);\n          s.vernacularName = names.length > 0 ? names[0].vernacularName : '';\n        });\n  const _deck = quizLogicHandler.getDeck({ ...deck, isCurrent: true }, NUMBER_OF_ALTERNATIVE_ANSWERS, numberOfCardsPerSpecies);        \n\n  subscription.add(quizDeck, 'deck', 'modal');\n  subscription.add(quizState, 'deckState', 'modal');\n  subscription.add(quizScore, 'deckScore', 'modal');\n\n  return _deck;\n};\n\nconst getDeckSummaries = async () => {\n  return await api.getDeckSummaries();\n};\n\nconst getNextDeck = async () => {\n  const decks = await api.getDecks();\n  return decks[0];\n};\n\nconst getTimeRemaining = endtime => {\n  const total = Date.parse(endtime) - Date.parse(new Date());\n  const seconds = Math.floor( (total/1000) % 60 );\n  const minutes = Math.floor( (total/1000/60) % 60 );\n  const hours = Math.floor( (total/(1000*60*60)) % 24 );\n  const days = Math.floor( total/(1000*60*60*24) );\n\n  return {\n    total,\n    days,\n    hours,\n    minutes,\n    seconds\n  };\n};\n\nlet timeinterval, currentClockTime;\n\nconst resetClock = () => {\n  clearInterval(timeinterval);\n  return currentClockTime;\n};\n\nconst disableAnswers = () => {\n  const answers = document.querySelector('.js-strips.answers');\n  if(answers) answers.classList.add('no-pointer-events');\n};\n\nconst initialiseClock = (clock, endtime) => {  \n  timeinterval = setInterval(() => {\n      const t = getTimeRemaining(endtime);\n      const seconds = (t.minutes * 60) + t.seconds;\n      clock.innerHTML = convertSecondsToClockTime(seconds);\n      if (t.total < 0) {\n        actions.boundUpdateDeckScoreHistory(store.getState().deckScore);\n        disableAnswers();\n        resetClock();\n      }\n      currentClockTime = convertSecondsToClockTime(seconds);\n  },1000);\n};\n\nexport const scoreResponseAndSetNextCard = (response, cardIndex = 0, cardCount, deckScore) => {\n\n  const index = ++cardIndex;\n\n  const isLastCard = index === cardCount;\n  const isSecondLastCard = index === (cardCount - 1);\n\n  const score = quizLogicHandler.getScore(response, isLastCard, deckScore);\n\n  setTimeout(() => {\n\n    // delay to allow the card to change red or green, indicating incorrect or correct\n\n    if(!isLastCard) {\n      actions.boundNextCard({ index, isLastCard, isSecondLastCard });\n    }\n\n    actions.boundUpdateDeckScore(score);\n\n    if(isLastCard) {\n      actions.boundUpdateDeckScoreHistory(score);\n      disableAnswers();\n    }\n  }, 500);\n\n  return score;\n\n};\n\nconst convertSecondsToClockTime = timeInSeconds => {\n  var pad = function(num, size) { return ('000' + num).slice(size * -1); },\n  time = parseFloat(timeInSeconds).toFixed(3),\n  hours = Math.floor(time / 60 / 60),\n  minutes = Math.floor(time / 60) % 60,\n  seconds = Math.floor(time - minutes * 60),\n  milliseconds = time.slice(-3);\n\n  return pad(minutes, 2) + ':' + pad(seconds, 2);\n};\n\nexport const logic = {\n  getDecks,\n  getQuizDeck,\n  getDeckSummaries,\n  getNextDeck,\n  initialiseClock,\n  resetClock,\n  scoreResponseAndSetNextCard,\n  convertSecondsToClockTime\n};","import { actions } from 'redux/actions/action-creators';\nimport { subscription } from 'redux/subscriptions';\nimport { logic } from 'quiz/quiz-logic';\nimport { quizDecks } from 'quiz/quiz-decks';\nimport { quizSettings } from 'quiz/quiz-settings';\nimport { quizSummary } from 'quiz/quiz-summary';\n\nexport const openQuiz = () => {\n\n  const init = async () => {\n\n    subscription.add(quizDecks, 'decks', 'modal');\n    subscription.add(quizSettings, 'decks', 'modal');\n    subscription.add(quizSummary, 'decks', 'modal');\n    \n    const decks = await logic.getDeckSummaries();\n    actions.boundUpdateDecks([ ...decks.filter(deck => deck.count > 0), { name: `${new Date().getTime()}`, count: 0 } ]);\n  };\n  \n  init();\n};\n","import { store } from 'redux/store';\nimport { renderTemplate } from 'quiz/templating';\nimport { actions } from 'redux/actions/action-creators';\n\nimport quizSettingsTemplate from 'quiz/quiz-settings-template.html';\n\nexport const quizSettings = decks => {\n\n  const { deckSettings } = store.getState();\n\n  const template = document.createElement('template');\n        template.innerHTML = quizSettingsTemplate;\n\n  const parent = document.querySelector('.js-quiz-middle');\n        parent.innerHTML = '';\n\n  renderTemplate({}, template.content, parent);\n\n  document.querySelectorAll('.names input').forEach(r => {\n    if(r.id === deckSettings.name) r.checked = true;\n    r.addEventListener('click', e => {\n      actions.boundUpdateDeckSettings({ name: e.target.id } );\n    });\n  });\n\n  document.querySelectorAll('.languages input').forEach(r => {\n    if(r.id === deckSettings.language) r.checked = true;\n    r.addEventListener('click', e => {\n      actions.boundUpdateDeckSettings({ language: e.target.id });\n    });\n  });\n\n};","import { store } from 'redux/store';\nimport { actions } from 'redux/actions/action-creators';\nimport { logic } from 'quiz/quiz-logic';\nimport { enums } from 'ui/helpers/enum-helper';\nimport { renderTemplate } from 'quiz/templating';\n\nimport beginTemplate from 'quiz/quiz-state-begin.html';\nimport scoreTemplate from 'quiz/quiz-state-score.html';\nimport { quizConfig } from 'quiz/quiz-config';\n\nexport const quizState = deckState => {\n\n  const { decks, deck } = store.getState();\n\n  const seconds = quizConfig.TIME_PER_QUESTION * deck.cards.length * quizConfig.QUESTIONS_PER_SPECIES;\n  const milliseconds = seconds * 1000;\n\n  const template = document.createElement('template');\n\n  switch(deckState) {\n    case enums.deckState.BEGIN:\n      template.innerHTML = beginTemplate;      \n      break;\n    case enums.deckState.SCORE:\n      template.innerHTML = scoreTemplate;      \n      break;\n    default:\n      template.innerHTML = scoreTemplate;\n  }\n\n  const parent = document.querySelector('.js-quiz-bottom');\n        parent.innerHTML = '';\n\n  renderTemplate({ time: logic.convertSecondsToClockTime(seconds), remaining: deck.cards.length }, template.content, parent);\n\n  const clock = document.querySelector('.js-clock');\n\n  switch(deckState.name) {\n    case enums.deckState.BEGIN.name:   \n      break;\n    case enums.deckState.SCORE.name:\n      const endTime = new Date(Date.now() + milliseconds);\n      logic.initialiseClock(clock, endTime);\n      break;\n    case enums.deckState.END.name:\n      clock.innerHTML = logic.resetClock();\n      break;\n  }\n  \n  document.querySelector('.js-quiz-back').addEventListener('click', e => {\n    logic.resetClock();\n    actions.boundUpdateDecks([ ...decks.filter(deck => deck.count > 0), { name: `${new Date().getTime()}`, count: 0 } ]);\n  });\n\n};\n\nexport const quizScore = deckScore => {\n\n  const { deck } = store.getState();\n\n  const score = document.querySelector('.js-deck-score');\n  const remaining = document.querySelector('.js-deck-remaining');\n\n  if(!score) return;\n\n  score.innerHTML = `${deckScore.correct}/${deckScore.total}`;\n  remaining.innerHTML = deck.cards.length - deckScore.total;\n};","import { store } from 'redux/store';\nimport { renderTemplate } from 'quiz/templating';\n\nimport quizSummaryTemplate from 'quiz/quiz-summary-template.html';\n\nexport const quizSummary = decks => {\n\n  const { deckScore, deckScoreHistory } = store.getState();\n\n  const template = document.createElement('template');\n        template.innerHTML = quizSummaryTemplate;\n\n  const parent = document.querySelector('.js-quiz-bottom');\n        parent.innerHTML = '';\n\n  renderTemplate({deckScoreHistory, deckScore}, template.content, parent);\n};","// https://github.com/jcgregorio/stamp/wiki\n\nvar Stamp = Stamp || {};\n\n(function(ns) {\n\n  ns.Context = function() {\n  };\n\n  ns.Context.prototype.import = function(id) {\n    return document.importNode(this.doc.querySelector('#'+id).content, true);\n  };\n\n  var re = /{{\\s([\\w\\.\\^]+)\\s}}/g;\n\n  function filterState(address, state) {\n    var mystate = state;\n    for (var i = 0, len = address.length; i < len; i++) {\n      var a = address[i];\n      if (a in mystate) {\n        mystate = mystate[a];\n      } else if (mystate.hasAttribute && mystate.hasAttribute(a)) {\n        mystate = mystate.getAttribute(a);\n      } else {\n        throw a + \" is not a valid property of \" + JSON.stringify(mystate);\n      }\n    }\n    return mystate;\n  }\n\n  function ssplice(str, index, count, add) {\n    return str.slice(0, index) + add + str.slice(index + count);\n  }\n\n  let match;\n  function addressOf(s) {\n    if ((match = re.exec(s)) != null) {\n      return match[1].split(\".\");\n    } else {\n      return null;\n    }\n  }\n\n  function expandString(s, state) {\n    var match;\n    var matches = [];\n    re.exec(\"\");\n    while ((match = re.exec(s)) != null) {\n      matches.push(match);\n    }\n\n    for (var i = matches.length - 1; i >= 0; i--) {\n      match = matches[i];\n      var address = match[1].split(\".\");\n      var m = filterState(address, state);\n      s = ssplice(s, match.index, match[0].length, m);\n    }\n    if (matches.length) {\n      return s;\n    }\n    return null;\n  }\n\n  function cloneAllNodes(a) {\n    var clones = [];\n    for (var i = 0, len = a.length; i < len; i++) {\n      if (a[i].nodeName == \"TEMPLATE\") {\n        clones.push(a[i].content.cloneNode(true));\n      } else {\n        clones.push(a[i].cloneNode(true));\n      }\n    }\n    return clones;\n  }\n\n  function appendChildren(ele, nodes) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      ele.appendChild(nodes[i]);\n    }\n  }\n\n  function removeChildren(ele) {\n    ele.innerHTML = \"\";\n  }\n\n  function replaceChildren(ele, nodes) {\n    ele.innerHTML = \"\";\n    appendChildren(ele, nodes);\n  }\n\n  function expand(ele, state) {\n    if (ele.nodeName === \"#text\") {\n      m = expandString(ele.textContent, state);\n      if (m != null) {\n        ele.textContent = m;\n      }\n      return ele;\n    }\n    if (!Array.isArray(ele)) {\n      ele = [ele];\n    }\n    for (var j = 0, len = ele.length; j < len; j++) {\n      var e = ele[j];\n      var processChildren = true;\n      if (e.nodeName === \"#text\") {\n        m = expandString(e.textContent, state);\n        if (m != null) {\n          e.textContent = m;\n        }\n      } else {\n        if (e.attributes != undefined) {\n          for (var i = e.attributes.length-1; i >= 0; i--) {\n            var attr = e.attributes[i];\n            if (attr.name.indexOf('data-repeat') === 0) {\n              processChildren = false;\n              var parts = attr.name.split('-');\n              if (parts.length !== 3 && parts.length !== 4) {\n                throw \"Repeat format is data-repeat-<name>[-<iterName>]. Got \" + attr.name;\n              }\n              var name = parts[2];\n              var iterName = parts[3];\n              var tpl = [];\n              while (e.firstChild) {\n                tpl.push(e.removeChild(e.firstChild));\n              }\n              var address = [attr.value];\n              if (attr.value.indexOf(\"}}\") !== -1) {\n                address = addressOf(attr.value);\n              }\n              if (address === null) {\n                throw attr.value + \" doesn't contain an address.\";\n              }\n              var childState = filterState(address, state);\n              var instanceState = {\n                \"^\": state,\n              };\n              if (Object.prototype.toString.call( childState) === '[object Array]') {\n                iterName = iterName || \"i\";\n                for (var k = 0; k < childState.length; k++) {\n                  var cl = cloneAllNodes(tpl);\n                  instanceState[name] =  childState[k];\n                  instanceState[iterName] = k;\n                  expand(cl, instanceState);\n                  appendChildren(e, cl);\n                }\n              } else {\n                iterName = iterName || \"key\";\n                var keys = Object.keys(childState).sort();\n                for (var m = 0; m < keys.length; m++) {\n                  var key = keys[m];\n                  var cl = cloneAllNodes(tpl);\n                  instanceState[name] = childState[key];\n                  instanceState[iterName] = key;\n                  expand(cl, instanceState);\n                  appendChildren(e, cl);\n                }\n              }\n              e.removeAttribute(attr.name);\n            } else {\n              m = expandString(attr.value, state);\n              if (m != null) {\n                var name = attr.name;\n                if (name.charAt(name.length-1) == \"-\") {\n                  e.removeAttribute(attr.name);\n                  e.setAttribute(attr.name.slice(0, -1), m);\n                } else {\n                  attr.value = m;\n                }\n              }\n            }\n          }\n        }\n      }\n      if (processChildren) {\n        var childEle = e.firstChild;\n        while (childEle != null) {\n          var nextSibling = childEle.nextSibling;\n          if (childEle.nodeName == \"TEMPLATE\") {\n            var replacement = expand(childEle.content.cloneNode(true), state);\n            while (replacement[0].childNodes.length > 0) {\n              e.insertBefore(replacement[0].firstChild, childEle);\n            }\n            e.removeChild(childEle);\n          } else {\n            expand(childEle, state);\n          }\n          childEle = nextSibling;\n        }\n      }\n    }\n    return ele;\n  };\n\n  function expandInto(target, ele, state) {\n    replaceChildren(target, expand(ele, state));\n  }\n\n  ns.appendChildren = appendChildren;\n  ns.expand = expand;\n  ns.expandInto = expandInto;\n})(Stamp);\n\nexport const renderTemplate = (context, content, parent, clone) => {\n    const contentClone = clone || document.importNode(content, true);    \n    var ctx = new Stamp.Context();\n    var expanded = Stamp.expand(contentClone, context);\n    Stamp.appendChildren(parent, expanded);\n};","// Module\nvar code = \"<section class=\\\"strips-container\\\">\\n  <ul class=\\\"answers strips js-strips\\\" data-repeat-answer=\\\"{{ card.answers }}\\\">\\n    <li class=\\\"strip js-strip\\\" data-name=\\\"{{ answer.name }}\\\" data-vernacular-name=\\\"{{ answer.vernacularName }}\\\">\\n      <button class=\\\"snap-icon-btn\\\">\\n        <span>{{ answer.name1 }}</span>\\n        <span>{{ answer.name2 }}</span>\\n      </button>\\n    </li>\\n  </ul>\\n</section>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<section class=\\\"image-block-container\\\">\\n  <div class=\\\"image-container double-centred-block\\\">\\n    <img src=\\\"{{ card.answer.src }}\\\" alt=\\\"{{ card.answer.name }}\\\" />\\n  </div>\\n</section>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"quiz-decks\\\">\\n  <ul class=\\\"strips\\\" data-repeat-deck=\\\"{{ decks }}\\\">\\n    <li class=\\\"strip js-decks\\\" data-name=\\\"{{ deck.name }}\\\">\\n      <button class=\\\"snap-icon-btn\\\">\\n        <span>{{ deck.name }}</span>\\n        <span>{{ deck.count }}</span>\\n      </button>\\n    </li>\\n  </ul>\\n</div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"quiz-settings\\\">\\n\\n  <div class=\\\"landscape double-centred-block\\\">\\n    <span>Primary test name</span>\\n  </div>\\n  <div class=\\\"landscape padding double-centred-block\\\">\\n    <span>Language for common names</span>\\n  </div>\\n\\n  <div class=\\\"names double-centred-block\\\">\\n    <div>\\n      <input type=\\\"radio\\\" id=\\\"latin\\\" name=\\\"names\\\" value=\\\"latin\\\" checked>\\n      <label for=\\\"latin\\\">Latin</label>\\n    </div>\\n    <div>\\n      <input type=\\\"radio\\\" id=\\\"vernacular\\\" name=\\\"names\\\" value=\\\"vernacular\\\">\\n      <label for=\\\"vernacular\\\">Vernacular</label>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"languages\\\">\\n    <div>\\n      <input type=\\\"radio\\\" id=\\\"en\\\" name=\\\"languages\\\" value=\\\"English\\\" checked=\\\"\\\">\\n      <label for=\\\"en\\\">English</label>\\n    </div>\\n    <div>\\n      <input type=\\\"radio\\\" id=\\\"fr\\\" name=\\\"languages\\\" value=\\\"Français\\\">\\n      <label for=\\\"fr\\\">Français</label>  \\n    </div>\\n    <div>\\n      <input type=\\\"radio\\\" id=\\\"de\\\" name=\\\"languages\\\" value=\\\"Deutsche\\\">\\n      <label for=\\\"de\\\">Deutsche</label>\\n    </div>\\n    <div>\\n      <input type=\\\"radio\\\" id=\\\"it\\\" name=\\\"languages\\\" value=\\\"Italiano\\\">\\n      <label for=\\\"it\\\">Italiano</label>\\n    </div>\\n    <div>\\n      <input type=\\\"radio\\\" id=\\\"es\\\" name=\\\"languages\\\" value=\\\"Español\\\">\\n      <label for=\\\"es\\\">Español</label>\\n    </div>  \\n    <div>\\n      <input type=\\\"radio\\\" id=\\\"pt\\\" name=\\\"languages\\\" value=\\\"Português\\\">\\n      <label for=\\\"pt\\\">Português</label>\\n    </div>\\n  </div>  \\n</div>\\n\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"state-container\\\">\\n  <div class=\\\"standard-block double-centred-block\\\">\\n    <span class=\\\"quiz-back js-quiz-back\\\">&#8612;</span>\\n  </div>\\n  <div class=\\\"standard-block double-centred-block score-card\\\">\\n    <span class=\\\"clock\\\">{{ time }}</span>  \\n  </div>\\n  <div class=\\\"standard-block double-centred-block\\\">\\n    <span class=\\\"score\\\">0/0</span>\\n    <span class=\\\"deck-remaining\\\">{{ remaining }}</span>\\n  </div>\\n</div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"state-container\\\">\\n  <div class=\\\"standard-block double-centred-block\\\">\\n    <span class=\\\"quiz-back js-quiz-back\\\">&#8612;</span>\\n  </div>\\n  <div class=\\\"standard-block double-centred-block score-card js-score-card\\\">\\n    <span class=\\\"clock js-clock\\\">{{ time }}</span>  \\n  </div>\\n  <div class=\\\"standard-block double-centred-block\\\">\\n    <span class=\\\"score js-deck-score\\\">0/0</span>\\n    <span class=\\\"deck-remaining js-deck-remaining\\\">{{ remaining }}</span>\\n  </div>\\n</div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<section>\\n  <div class=\\\"standard-block vertical-centred-block double-centred-block\\\">\\n    <div>\\n      <span class=\\\"padding\\\">Session score</span><span>{{ deckScoreHistory.correct }} / {{ deckScoreHistory.total }}</span>\\n    </div>\\n    <div class=\\\"small-text\\\">\\n      (complete attempts only!)\\n    </div>\\n    <!-- <div>\\n      <span class=\\\"padding\\\">Last attempt</span><span>{{ deckScore.correct }} / {{ deckScore.total }}</span>\\n    </div> -->\\n  </div>\\n</section>\";\n// Exports\nmodule.exports = code;"],"sourceRoot":""}